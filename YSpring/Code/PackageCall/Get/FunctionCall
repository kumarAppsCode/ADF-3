controller:

@RequestMapping(value = "addVal")
    public Map<String, Object> getSumofValue(
        @RequestParam(value = "n1") Integer number1,
        @RequestParam(value = "n2") Integer number2){

    Map<String, Object> result=propertyMater_so.getSumOfValue(number1, number2);   
            
    return result;
    }
**********

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.SqlOutParameter;
import org.springframework.jdbc.core.SqlParameter;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.core.simple.SimpleJdbcCall;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.sql.Types;
import java.util.HashMap;
import java.util.Map;


    public Map<String, Object> getSumOfValue(Integer number1, Integer number2) {
        
        Map<String, Object> response=new HashMap<String, Object>();
        SimpleJdbcCall process=DBAUtils.callFunction("adder", jdbcTemplate);
        process.declareParameters(
        new SqlParameter("n1", Types.INTEGER),
        new SqlParameter("n2", Types.INTEGER)
        ).compile();
        SqlParameterSource param=new MapSqlParameterSource()
        .addValue("n1",number1)
        .addValue("n2", number2);
        
        BigDecimal i=process.executeFunction(BigDecimal.class, param);
        response.put("key", i); 
        return  response;
    }
****************
    import org.springframework.jdbc.core.JdbcTemplate;
    import org.springframework.jdbc.core.simple.SimpleJdbcCall;


    /**
     * This method is used to get instance of simplejdbccall by passing below parameters
     * @param procedure
     * @param jdbcTemplate
     * @return
     */
    public static SimpleJdbcCall callFunction(String functionName, JdbcTemplate jdbcTemplate){
        SimpleJdbcCall  executor = new SimpleJdbcCall(jdbcTemplate)
            .withFunctionName(functionName);
        return executor;
    }
================================================================================================================    
