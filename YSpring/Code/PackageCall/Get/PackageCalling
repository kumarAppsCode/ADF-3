import java.util.Map;
import com.sample.contract.Services.PropertyMater_SO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

controller:
    @RequestMapping(value = "getpro")
    public Map<String, Object> getAllProperty(
        @RequestParam (value = "p_propertyid", required = false) String p_propertyid){ 
            
    Map<String, Object> result=propertyMater_so.getAllProperty(p_propertyid);

    return result;
    }
************************
import java.math.BigDecimal;
import java.sql.Types;
import java.util.HashMap;
import java.util.Map;
import com.sample.contract.Utils.DBAUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.SqlOutParameter;
import org.springframework.jdbc.core.SqlParameter;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.core.simple.SimpleJdbcCall;
import org.springframework.stereotype.Service;
===
public Map<String, Object> getAllProperty(String p_propertyid) {
        
        SimpleJdbcCall process=DBAUtils.callStoredPackage("cust_sal", "get_property", jdbcTemplate);
        process.declareParameters(
         new SqlParameter("P_PROPERTY_ID",  Types.NUMERIC),
         new SqlOutParameter("P_STATUS",    Types.VARCHAR),
         new SqlOutParameter("P_RECORDSET", Types.REF_CURSOR)
        ).compile();
        SqlParameterSource param=new MapSqlParameterSource()
        .addValue("P_PROPERTY_ID", p_propertyid);
       //  .addValue("P_PROPERTY_ID", p_propertyid) --if multiple
           return process.execute(param);
    }
************************
     /**
     * This method is used to get instance of simplejdbccall by passing below parameters
     * @param schema
     * @param pkge
     * @param procedure
     * @param jdbcTemplate
     * @return
     */
    public static SimpleJdbcCall callStoredPackage(String pkge, String procedure, JdbcTemplate jdbcTemplate){
        SimpleJdbcCall  executor = new SimpleJdbcCall(jdbcTemplate)
            .withCatalogName(pkge)
            .withProcedureName(procedure);
        return executor;
    }
 ============================================================   
